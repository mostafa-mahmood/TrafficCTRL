{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "E_U83-wZ0qtotXxPK3dU6",
      "type": "text",
      "x": 1015.4568496909405,
      "y": -30.58445318539924,
      "width": 646.800099690755,
      "height": 61.25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aN",
      "roundness": null,
      "seed": 1242430329,
      "version": 220,
      "versionNonce": 782559688,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1756989394232,
      "link": null,
      "locked": false,
      "text": "Sliding Window Algorithm",
      "fontSize": 49.000000000000014,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Sliding Window Algorithm",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "-0xRFnNK1Sakznoshjrk7",
      "type": "text",
      "x": 528.4567954374688,
      "y": 85.66554681460019,
      "width": 1710.249023437512,
      "height": 180.00000000000034,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aO",
      "roundness": null,
      "seed": 1290988247,
      "version": 1299,
      "versionNonce": 1933175224,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1756989318579,
      "link": null,
      "locked": false,
      "text": "Unlike fixed window rate limiting that uses discrete, non-overlapping time intervals,\nleading to potential bursts of requests at the window boundaries. sliding window rate\nlimiting uses a continuously moving time interval, providing more precise and flexible\ncontrol by adapting to traffic changes and mitigating boundary issues.",
      "fontSize": 36.00000000000007,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Unlike fixed window rate limiting that uses discrete, non-overlapping time intervals, leading to potential bursts of requests at the window boundaries. sliding window rate limiting uses a continuously moving time interval, providing more precise and flexible control by adapting to traffic changes and mitigating boundary issues.",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "id": "TQrzeLt9OFdhPynF01KT3",
      "type": "text",
      "x": 526.256044026878,
      "y": 375.66554681460076,
      "width": 1625.901611328125,
      "height": 180,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aP",
      "roundness": null,
      "seed": 841276344,
      "version": 314,
      "versionNonce": 1796944568,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1756989379021,
      "link": null,
      "locked": false,
      "text": "Issue:\nSliding window stores every individual request timestamp, so memory grows linearly\nwith traffic (O(requests)) and pruning expired timestamps requires scanning the\nentire array (O(n)).",
      "fontSize": 36,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Issue:\nSliding window stores every individual request timestamp, so memory grows linearly with traffic (O(requests)) and pruning expired timestamps requires scanning the entire array (O(n)).",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "id": "R8avbgDqjJvXDJxsN5_Ia",
      "type": "text",
      "x": 539.3068481650616,
      "y": 655.6655468146007,
      "width": 1555.4072265625,
      "height": 350,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aQ",
      "roundness": null,
      "seed": 418982072,
      "version": 31,
      "versionNonce": 1662582712,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1756989697583,
      "link": null,
      "locked": false,
      "text": "The Optimizations:\n\n1- Use int64 timestamps instead of time.Time - 3x less memory per timestamp\n2- Binary search for pruning large arrays - O(log n) instead of O(n) when removing expired timestamps\n3- Cap max timestamps per tenant - prevents memory bombs from high-traffic tenants\n4- Pre-allocate slice capacity - reduces reallocations during normal operation\n5- Create new slices after pruning - prevents memory leaks from large underlying arrays\n6- RWMutex for tenant map - allows concurrent reads while protecting writes\n7- Per-tenant mutexes - reduces lock contention between different tenants\n8- Double-check locking pattern - minimizes write lock acquisition for tenant creation",
      "fontSize": 28,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "The Optimizations:\n\n1- Use int64 timestamps instead of time.Time - 3x less memory per timestamp\n2- Binary search for pruning large arrays - O(log n) instead of O(n) when removing expired timestamps\n3- Cap max timestamps per tenant - prevents memory bombs from high-traffic tenants\n4- Pre-allocate slice capacity - reduces reallocations during normal operation\n5- Create new slices after pruning - prevents memory leaks from large underlying arrays\n6- RWMutex for tenant map - allows concurrent reads while protecting writes\n7- Per-tenant mutexes - reduces lock contention between different tenants\n8- Double-check locking pattern - minimizes write lock acquisition for tenant creation",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff",
    "lockedMultiSelections": {}
  },
  "files": {}
}